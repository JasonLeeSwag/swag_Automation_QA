name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'  # 每週一早上 9 點執行
  issues:
    types: [opened, edited, labeled, unlabeled]
  pull_request:
    types: [opened, synchronize, reopened, labeled, edited]
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options: [qat, uat]
      test_types:
        description: '選擇測試類型 (可多選，用逗號分隔：bvt,login,register)'
        required: true
        default: 'bvt'
        type: string
      custom_domain:
        description: '自定義網域 (可輸入完整URL或版本號)'
        required: false
        type: string
        default: ''

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  check_and_prepare:
    runs-on: [self-hosted, macos]
    outputs:
      should_run: ${{ steps.check_conditions.outputs.should_run }}
      test_types: ${{ steps.check_conditions.outputs.test_types }}
      environment: ${{ steps.check_conditions.outputs.environment }}
      base_url: ${{ steps.check_conditions.outputs.base_url }}
    
    steps:
      - name: 檢查條件和設置變數
        id: check_conditions
        run: |
          # 輔助函數：處理測試類型陣列
          function processTestTypes() {
            local types=("$@")
            if [ ${#types[@]} -eq 0 ]; then
              echo '["bvt"]'
            else
              local result="["
              for i in "${!types[@]}"; do
                [[ $i -gt 0 ]] && result="$result,"
                result="$result\"${types[$i]}\""
              done
              echo "$result]"
            fi
          }
          
          # 初始化變數
          SHOULD_RUN="true"
          TEST_TYPES="[]"
          ENVIRONMENT=""
          BASE_URL=""
          
          # 根據觸發類型處理
          case "${{ github.event_name }}" in
            "schedule")
              TEST_TYPES='["bvt"]'
              ENVIRONMENT="uat"
              ;;
              
            "workflow_dispatch")
              TYPES=()
              if [[ -n "${{ inputs.test_types }}" ]]; then
                IFS=',' read -ra TEMP_TYPES <<< "${{ inputs.test_types }}"
                for type in "${TEMP_TYPES[@]}"; do
                  cleaned_type=$(echo "$type" | tr -d '[:space:]')
                  [[ -n "$cleaned_type" ]] && TYPES+=("$cleaned_type")
                done
              fi
              TEST_TYPES=$(processTestTypes "${TYPES[@]}")
              ENVIRONMENT="${{ inputs.environment }}"
              [[ -n "${{ inputs.custom_domain }}" ]] && BASE_URL="${{ inputs.custom_domain }}"
              ;;
              
            "pull_request")
              if [[ "${{ contains(github.event.pull_request.labels.*.name, 'fulltest') }}" == "true" ]]; then
                TEST_TYPES='["bvt","login","register","video","myprofile"]'
                ENVIRONMENT="qat"
              elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'e2e') }}" == "true" ]]; then
                DETECTED_TYPES=()
                TITLE=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]')
                [[ $TITLE =~ login|sign.?in ]] && DETECTED_TYPES+=("login")
                [[ $TITLE =~ register|sign.?up ]] && DETECTED_TYPES+=("register")
                [[ $TITLE =~ video|stream|rtc ]] && DETECTED_TYPES+=("video")
                [[ $TITLE =~ profile|account ]] && DETECTED_TYPES+=("myprofile")
                TEST_TYPES=$(processTestTypes "${DETECTED_TYPES[@]}")
                ENVIRONMENT="qat"
              else
                SHOULD_RUN="false"
              fi
              ;;
              
            "issues")
              DETECTED_TYPES=()
              if [[ "${{ contains(github.event.issue.labels.*.name, 'test:all') }}" == "true" ]]; then
                TEST_TYPES='["bvt","login","register","video","myprofile"]'
              else
                [[ "${{ contains(github.event.issue.labels.*.name, 'e2e') }}" == "true" ]] && DETECTED_TYPES+=("bvt")
                [[ "${{ contains(github.event.issue.labels.*.name, 'test:login') }}" == "true" ]] && DETECTED_TYPES+=("login")
                [[ "${{ contains(github.event.issue.labels.*.name, 'test:register') }}" == "true" ]] && DETECTED_TYPES+=("register")
                [[ "${{ contains(github.event.issue.labels.*.name, 'test:video') }}" == "true" ]] && DETECTED_TYPES+=("video")
                [[ "${{ contains(github.event.issue.labels.*.name, 'test:profile') }}" == "true" ]] && DETECTED_TYPES+=("myprofile")
                
                if [ ${#DETECTED_TYPES[@]} -eq 0 ]; then
                  SHOULD_RUN="false"
                else
                  TEST_TYPES=$(processTestTypes "${DETECTED_TYPES[@]}")
                fi
              fi
              
              if [[ "${SHOULD_RUN}" == "true" ]]; then
                ENVIRONMENT="qat"
                if [[ "${{ github.event.issue.body }}" =~ base_url:[[:space:]]*(http[s]?:\/\/[^\s]*) ]]; then
                  BASE_URL="${BASH_REMATCH[1]}"
                fi
              fi
              ;;
          esac
          
          echo "should_run=${SHOULD_RUN}" >> $GITHUB_OUTPUT
          echo "test_types=${TEST_TYPES}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "base_url=${BASE_URL}" >> $GITHUB_OUTPUT

  run_parallel_tests:
    needs: check_and_prepare
    if: needs.check_and_prepare.outputs.should_run == 'true'
    runs-on: [self-hosted, macos]
    strategy:
      fail-fast: false
      matrix:
        test_type: ${{ fromJson(needs.check_and_prepare.outputs.test_types) }}
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 準備測試環境
        run: |
          # 設置工作目錄
          WORK_DIR="swag_Automation_QA_${{ matrix.test_type }}"
          cp -r swag_Automation_QA $WORK_DIR
          echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          
          # 清理工作區
          rm -rf $WORK_DIR/*.xml
          rm -rf $WORK_DIR/*.html
          rm -rf $WORK_DIR/screenshots
          
          # 顯示配置
          echo "測試環境: ${{ needs.check_and_prepare.outputs.environment }}"
          echo "測試類型: ${{ matrix.test_type }}"
          echo "基礎網址: ${{ needs.check_and_prepare.outputs.base_url }}"

      - name: 更新網域設定
        if: needs.check_and_prepare.outputs.base_url != ''
        run: |
          cd ${{ env.WORK_DIR }}
          cp ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml.bak
          python3 <<EOF
          import yaml
          
          def process_domain_input(input_str):
              if not input_str:
                  return 'https://swag.live/?lang=zh-TW'
              if input_str.startswith('http'):
                  return input_str
              if input_str.startswith('v3-'):
                  return f'https://{input_str}.app.swag.live/?lang=zh-TW'
              if '.app.swag.live' in input_str:
                  return f'https://{input_str}/?lang=zh-TW'
              return f'https://{input_str}.app.swag.live/?lang=zh-TW'
          
          with open('${{ needs.check_and_prepare.outputs.environment }}_domain.yaml', 'r', encoding='utf-8') as file:
              config = yaml.safe_load(file)
          config['SWAG_BASE_URL'] = process_domain_input('${{ needs.check_and_prepare.outputs.base_url }}')
          with open('${{ needs.check_and_prepare.outputs.environment }}_domain.yaml', 'w', encoding='utf-8') as file:
              yaml.dump(config, file, allow_unicode=True, default_flow_style=False)
          EOF

      - name: 執行測試
        id: test
        continue-on-error: true
        run: |
          cd ${{ env.WORK_DIR }}
          TEST_CMD="arch -arm64 robot -v BROWSER:chrome -v SELENIUM_TIMEOUT:60 -v SELENIUM_IMPLICIT_WAIT:30"
          TEST_CMD="$TEST_CMD -V data.yaml -V country.yaml -V ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml"
          
          if [[ "${{ matrix.test_type }}" == "fulltest" ]]; then
            $TEST_CMD TestCase
          else
            $TEST_CMD -i ${{ matrix.test_type }} TestCase
          fi

      - name: 分析測試結果
        id: analyze_results
        run: |
          python3 <<EOF
          import os
          from xml.etree import ElementTree as ET
          from datetime import datetime
          
          def generate_test_report():
              result_file = '${{ env.WORK_DIR }}/output.xml'
              if not os.path.exists(result_file):
                  return "找不到測試結果檔案"
              
              tree = ET.parse(result_file)
              tests = tree.findall('.//test')
              passed = failed = 0
              failed_tests = []
              
              for test in tests:
                  name = test.get('name', 'Unknown Test')
                  status = test.find('status').get('status', '').upper()
                  if status == 'PASS':
                      passed += 1
                  elif status == 'FAIL':
                      failed += 1
                      message = test.find('status').get('message', 'No error message')
                      failed_tests.append((name, message))
              
              total = len(tests)
              success_rate = (passed / total * 100) if total > 0 else 0
              test_status = "✅PASS" if failed == 0 else "❌FAIL"
              
              # 生成報告
              report = [
                  "### 測試結果摘要",
                  f"\n**觸發方式:** ${{ github.event_name }}",
                  f"**執行環境:** ${{ needs.check_and_prepare.outputs.environment }}",
                  f"**測試類型:** ${{ matrix.test_type }}",
                  f"**總測試數:** {total}",
                  f"**通過:** {passed}",
                  f"**失敗:** {failed}",
                  f"**成功率:** {success_rate:.1f}%"
              ]
              
              if failed_tests:
                  report.append("\n### 失敗的測試案例")
                  for name, message in failed_tests:
                      report.extend([f"- **{name}**", f"  - 錯誤信息: {message}"])
              
              # 設置環境變數
              current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
              with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                  env_file.write(f'TEST_STATUS={test_status}\n')
                  env_file.write(f'TOTAL_TESTS={total}\n')
                  env_file.write(f'CURRENT_TIME={current_time}\n')
              
              return "\n".join(report)
          
          report = generate_test_report()
          with open('test-report.md', 'w', encoding='utf-8') as f:
              f.write(report)
          EOF

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TEST_STATUS }}-test-results-${{ matrix.test_type }}_Total${{ env.TOTAL_TESTS }}_${{ env.CURRENT_TIME }}
          path: |
            ${{ env.WORK_DIR }}/*.xml
            ${{ env.WORK_DIR }}/*.html
            ${{ env.WORK_DIR }}/screenshots/**
            test-report.md
          if-no-files-found: warn

      - name: 發布測試報告評論
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });