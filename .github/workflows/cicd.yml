name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'  # 每週一早上 9 點執行

  issues:
    types: [opened, edited]
    
  pull_request:
    types: [opened, synchronize, reopened, labeled, edited]
    
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
          - qat
          - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
          - bvt
          - login
          - register
          - video
          - myprofile
          - fulltest
      custom_domain:
        description: '自定義網域 (可輸入完整URL或版本號)'
        required: false
        type: string
        default: ''

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  # 檢查觸發條件和準備環境
  check_and_prepare:
    runs-on: [self-hosted, macos]
    outputs:
      should_run: ${{ steps.check_conditions.outputs.should_run }}
      test_type: ${{ steps.check_conditions.outputs.test_type }}
      environment: ${{ steps.check_conditions.outputs.environment }}
      base_url: ${{ steps.check_conditions.outputs.base_url }}
    
    steps:
      - name: 檢查條件和設置變數
        id: check_conditions
        run: |
          # 初始化變數
          SHOULD_RUN="true"
          TEST_TYPE=""
          ENVIRONMENT=""
          BASE_URL=""
          
          # 根據不同的觸發類型處理
          case "${{ github.event_name }}" in
            "schedule")
              echo "排程觸發 - 週一自動執行"
              TEST_TYPE="bvt"
              ENVIRONMENT="uat"
              ;;
              
            "workflow_dispatch")
              echo "手動觸發"
              TEST_TYPE="${{ inputs.test_type }}"
              ENVIRONMENT="${{ inputs.environment }}"
              if [[ -n "${{ inputs.custom_domain }}" ]]; then
                BASE_URL="${{ inputs.custom_domain }}"
              fi
              ;;
              
            "pull_request")
              echo "PR 觸發"
              if [[ "${{ contains(github.event.pull_request.labels.*.name, 'fulltest') }}" == "true" ]]; then
                TEST_TYPE="fulltest"
                ENVIRONMENT="qat"
              elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'e2e') }}" == "true" ]]; then
                TITLE=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]')
                if [[ $TITLE =~ login|sign.?in ]]; then
                  TEST_TYPE="login"
                elif [[ $TITLE =~ register|sign.?up ]]; then
                  TEST_TYPE="register"
                elif [[ $TITLE =~ video|stream|rtc ]]; then
                  TEST_TYPE="video"
                elif [[ $TITLE =~ profile|account ]]; then
                  TEST_TYPE="myprofile"
                else
                  TEST_TYPE="bvt"
                fi
                ENVIRONMENT="qat"
              else
                SHOULD_RUN="false"
              fi
              ;;
              
            "issues")
              echo "Issue 觸發"
              if [[ "${{ contains(github.event.issue.labels.*.name, 'e2e') }}" == "true" ]]; then
                TEST_TYPE="bvt"
                ENVIRONMENT="qat"
                # 檢查 Issue 內容中的自定義網域
                if [[ "${{ github.event.issue.body }}" =~ base_url:[[:space:]]*(http[s]?:\/\/[^\s]*) ]]; then
                  BASE_URL="${BASH_REMATCH[1]}"
                fi
              else
                SHOULD_RUN="false"
              fi
              ;;
          esac
          
          # 輸出結果
          echo "should_run=${SHOULD_RUN}" >> $GITHUB_OUTPUT
          echo "test_type=${TEST_TYPE}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "base_url=${BASE_URL}" >> $GITHUB_OUTPUT
          
          # 輸出日誌
          echo "設置結果:"
          echo "Should Run: ${SHOULD_RUN}"
          echo "Test Type: ${TEST_TYPE}"
          echo "Environment: ${ENVIRONMENT}"
          echo "Base URL: ${BASE_URL}"

  # 執行測試
  run_tests:
    needs: check_and_prepare
    if: needs.check_and_prepare.outputs.should_run == 'true'
    runs-on: [self-hosted, macos]
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 顯示測試配置
        run: |
          echo "測試環境: ${{ needs.check_and_prepare.outputs.environment }}"
          echo "測試類型: ${{ needs.check_and_prepare.outputs.test_type }}"
          echo "基礎網址: ${{ needs.check_and_prepare.outputs.base_url }}"

      - name: 清理工作區
        run: |
          rm -rf swag_Automation_QA/*.xml
          rm -rf swag_Automation_QA/*.html

      - name: 更新網域設定
        if: needs.check_and_prepare.outputs.base_url != ''
        run: |
          cd swag_Automation_QA
          cp ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml.bak
          
          python3 <<EOF
          import yaml
          
          def process_domain_input(input_str):
              if not input_str:
                  return 'https://swag.live/?lang=zh-TW'
              if input_str.startswith('http'):
                  return input_str
              if input_str.startswith('v3-'):
                  return f'https://{input_str}.app.swag.live/?lang=zh-TW'
              if '.app.swag.live' in input_str:
                  return f'https://{input_str}/?lang=zh-TW'
              return f'https://{input_str}.app.swag.live/?lang=zh-TW'
          
          with open('${{ needs.check_and_prepare.outputs.environment }}_domain.yaml', 'r', encoding='utf-8') as file:
              config = yaml.safe_load(file)
          
          config['SWAG_BASE_URL'] = process_domain_input('${{ needs.check_and_prepare.outputs.base_url }}')
          
          with open('${{ needs.check_and_prepare.outputs.environment }}_domain.yaml', 'w', encoding='utf-8') as file:
              yaml.dump(config, file, allow_unicode=True, default_flow_style=False)
          EOF

      - name: 執行測試
        id: test
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          if [[ "${{ needs.check_and_prepare.outputs.test_type }}" == "fulltest" ]]; then
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml \
              TestCase
          else
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${{ needs.check_and_prepare.outputs.environment }}_domain.yaml \
              -i ${{ needs.check_and_prepare.outputs.test_type }} \
              TestCase
          fi

      - name: 分析測試結果
        id: analyze_results
        run: |
          python3 <<EOF
          import os
          from xml.etree import ElementTree as ET
          from datetime import datetime
          
          def generate_test_report():
              result_file = 'swag_Automation_QA/output.xml'
              if not os.path.exists(result_file):
                  return "找不到測試結果檔案"
                  
              tree = ET.parse(result_file)
              root = tree.getroot()
              tests = root.findall('.//test')
              
              report = ["### 測試結果摘要"]
              report.append(f"\n**觸發方式:** ${{ github.event_name }}")
              report.append(f"**執行環境:** ${{ needs.check_and_prepare.outputs.environment }}")
              report.append(f"**測試類型:** ${{ needs.check_and_prepare.outputs.test_type }}")
              
              passed = failed = 0
              failed_tests = []
              
              for test in tests:
                  name = test.get('name', 'Unknown Test')
                  status = test.find('status').get('status', '').upper()
                  
                  if status == 'PASS':
                      passed += 1
                  elif status == 'FAIL':
                      failed += 1
                      message = test.find('status').get('message', 'No error message')
                      failed_tests.append((name, message))
              
              total = len(tests)
              success_rate = (passed / total * 100) if total > 0 else 0
              
              report.append(f"**總測試數:** {total}")
              report.append(f"**通過:** {passed}")
              report.append(f"**失敗:** {failed}")
              report.append(f"**成功率:** {success_rate:.1f}%")
              
              if failed_tests:
                  report.append("\n### 失敗的測試案例")
                  for name, message in failed_tests:
                      report.append(f"- **{name}**")
                      report.append(f"  - 錯誤信息: {message}")
              
              return "\n".join(report)
          
          report = generate_test_report()
          with open('test-report.md', 'w', encoding='utf-8') as f:
              f.write(report)
          
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
              env_file.write(f'CURRENT_TIME={current_time}\n')
          EOF

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.check_and_prepare.outputs.test_type }}_${{ env.CURRENT_TIME }}
          path: |
            swag_Automation_QA/*.xml
            swag_Automation_QA/*.html
            test-report.md
          if-no-files-found: warn

      - name: 發布測試報告評論
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            const createComment = async () => {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            };
            
            await createComment();