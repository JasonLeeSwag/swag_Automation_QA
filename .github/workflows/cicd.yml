name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'
  
  pull_request:
    types: [opened, synchronize, reopened]
    labels:
      - e2e
  
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
        - qat
        - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
        - bvt
        - login
        - register
        - video
        - myprofile

jobs:
  test:
    runs-on: macos-latest
    
    env:
      ENVIRONMENT: ${{ github.event_name == 'schedule' && 'uat' || inputs.environment }}
      TEST_TYPE: ${{ (github.event_name == 'schedule' || github.event_name == 'pull_request') && 'bvt' || inputs.test_type }}
      CHROMEDRIVER_PATH: ${GITHUB_WORKSPACE}/chromedriver
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 設定 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: 設定 PYTHONPATH
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE/swag_Automation_QA/robotframework/robot_lib" >> $GITHUB_ENV
          
      - name: 下載並設定 ChromeDriver
        run: |
          # 獲取 Chrome 版本
          CHROME_VERSION=$(defaults read /Applications/Google\ Chrome.app/Contents/Info.plist KSVersion)
          echo "Chrome version: $CHROME_VERSION"
          
          # 下載對應版本的 ChromeDriver
          mkdir -p chromedriver
          cd chromedriver
          
          curl -LO "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$(echo $CHROME_VERSION | cut -d. -f1-3)/mac-arm64/chromedriver-mac-arm64.zip"
          unzip chromedriver-mac-arm64.zip
          mv chromedriver-mac-arm64/chromedriver ../
          cd ..
          chmod +x chromedriver
          
          # 設定環境變數
          echo "CHROMEDRIVER_PATH=$PWD/chromedriver" >> $GITHUB_ENV
          
      - name: 安裝 Python 套件
        run: |
          python -m pip install --upgrade pip
          pip install \
            robotframework==7.0.1 \
            robotframework-seleniumlibrary==6.3.0 \
            robotframework-selenium2library==3.0.0 \
            selenium==4.23.1 \
            pyotp==2.9.0 \
            robotframework-requests==0.9.7 \
            robotframework-jsonlibrary==0.5 \
            requests==2.32.3 \
            PyYAML==6.0.2 \
            python-dotenv==1.0.1 \
            cryptography==43.0.0 \
            pyOpenSSL==24.2.1 \
            Faker==27.0.0 \
            webdriver-manager==4.0.2 \
            robotframework-jsonvalidator==2.0.0 \
            robotframework-debuglibrary==2.5.0

      - name: 確認環境設定
        run: |
          echo "=== 環境變數 ==="
          echo "PYTHONPATH: $PYTHONPATH"
          echo "CHROMEDRIVER_PATH: $CHROMEDRIVER_PATH"
          
          echo "=== Chrome 和 ChromeDriver 版本 ==="
          $CHROMEDRIVER_PATH --version
          /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version
          
          echo "=== Python 套件 ==="
          pip list
          
      - name: 執行自動化測試
        id: initial_test
        continue-on-error: true
        env:
          webdriver_manager_path: ${CHROMEDRIVER_PATH}
        run: |
          cd swag_Automation_QA
          
          # 建立符號連結到 ChromeDriver
          mkdir -p robotframework/robot_lib/chromedriver
          ln -s $CHROMEDRIVER_PATH robotframework/robot_lib/chromedriver/
          
          # 執行測試
          robot \
            -v BROWSER:chrome \
            -v SELENIUM_TIMEOUT:30 \
            -v SELENIUM_IMPLICIT_WAIT:10 \
            -v CHROMEDRIVER_PATH:$CHROMEDRIVER_PATH \
            -v BROWSER_OPTIONS:"add_argument('--no-sandbox');add_argument('--start-maximized');add_argument('--disable-dev-shm-usage');add_argument('--disable-gpu');add_argument('--window-size=1920,1080');add_argument('--disable-notifications');add_argument('--enable-automation')" \
            -V data.yaml \
            -V country.yaml \
            -V ${ENVIRONMENT}_domain.yaml \
            -i ${TEST_TYPE} \
            TestCase

      - name: 重新執行失敗的測試
        if: steps.initial_test.outcome == 'failure'
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          if [ -f "output.xml" ]; then
            robot \
              --rerunfailed output.xml \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:30 \
              -v SELENIUM_IMPLICIT_WAIT:10 \
              -v CHROMEDRIVER_PATH:$CHROMEDRIVER_PATH \
              -v BROWSER_OPTIONS:"add_argument('--no-sandbox');add_argument('--start-maximized');add_argument('--disable-dev-shm-usage');add_argument('--disable-gpu');add_argument('--window-size=1920,1080');add_argument('--disable-notifications');add_argument('--enable-automation')" \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              -i ${TEST_TYPE} \
              TestCase
          fi

      - name: 合併測試結果
        if: steps.initial_test.outcome == 'failure'
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          if [ -f "output.xml" ]; then
            rebot \
              --output merged-output.xml \
              --merge \
              output.xml \
              output.xml
          fi

      - name: 上傳測試結果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.TEST_TYPE }}
          path: |
            swag_Automation_QA/*.xml
            swag_Automation_QA/log.html
            swag_Automation_QA/report.html
            swag_Automation_QA/reports/
          if-no-files-found: warn

      - name: 清理環境
        if: always()
        run: |
          pkill -f "Google Chrome" || true
          pkill -f "chromedriver" || true