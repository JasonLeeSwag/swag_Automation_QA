name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'

  pull_request:
    types: [opened, synchronize, reopened]
    labels:
      - e2e

  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
          - qat
          - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
          - bvt
          - login
          - register
          - video
          - myprofile

jobs:
  test:
    runs-on: [self-hosted, macos]

    env:
      ENVIRONMENT: ${{ github.event_name == 'schedule' && 'uat' || inputs.environment }}
      TEST_TYPE: ${{ (github.event_name == 'schedule' || github.event_name == 'pull_request') && 'bvt' || inputs.test_type }}
      PYTHONPATH: ${{ github.workspace }}/swag_Automation_QA/robotframework/robot_lib

    steps:
      - name: 清理工作區
        run: |
          rm -rf swag_Automation_QA/results/
          rm -rf swag_Automation_QA/reports/

      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 檢查並安裝必要的 Python 模組
        run: |
          pip3 install --user matplotlib xmltodict

      - name: 執行測試
        id: test
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          mkdir -p results
          arch -arm64 robot \
            -v BROWSER:chrome \
            -v SELENIUM_TIMEOUT:60 \
            -v SELENIUM_IMPLICIT_WAIT:30 \
            -V data.yaml \
            -V country.yaml \
            -V ${ENVIRONMENT}_domain.yaml \
            -i ${TEST_TYPE} \
            --outputdir results \
            TestCase

      - name: 分析測試結果並生成視覺化圖表
        id: analyze_results
        run: |
          python3 <<EOF
          import xml.etree.ElementTree as ET
          import matplotlib.pyplot as plt
          import os

          # 讀取測試結果
          result_file = 'swag_Automation_QA/results/output.xml'
          pass_count = fail_count = 0

          if os.path.exists(result_file):
              tree = ET.parse(result_file)
              root = tree.getroot()
              for suite in root.iter('suite'):
                  for test in suite.iter('test'):
                      if test.attrib.get('status') == 'PASS':
                          pass_count += 1
                      elif test.attrib.get('status') == 'FAIL':
                          fail_count += 1

          # 生成圓餅圖
          labels = ['Passed', 'Failed']
          sizes = [pass_count, fail_count]
          colors = ['#4CAF50', '#FF5722']

          plt.figure(figsize=(6, 6))
          plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=140)
          plt.title('Test Results Overview')
          plt.savefig('swag_Automation_QA/results/test_results_pie_chart.png')
          EOF

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.TEST_TYPE }}
          path: |
            swag_Automation_QA/results/
          if-no-files-found: warn

      - name: 提交自動生成的 PR
        uses: peter-evans/create-pull-request@v5
        with:
          title: |
            ${{ github.event_name == 'workflow_dispatch' && '手動觸發' || 
                github.event_name == 'pull_request' && 'e2e自動觸發' || 
                '定時自動觸發' }}-QA Full-Test
          body: |
            ### 測試執行時間: `${{ github.run_started_at }}`
            
            **環境**: `${{ env.ENVIRONMENT }}`
            **測試類型**: `${{ env.TEST_TYPE }}`

            ### 測試結果摘要
            - 通過測試: `${{ steps.analyze_results.outputs.pass_count }}`
            - 失敗測試: `${{ steps.analyze_results.outputs.fail_count }}`

            ![測試結果](swag_Automation_QA/results/test_results_pie_chart.png)

            ### 測試報告
            [下載完整測試報告](swag_Automation_QA/results/log.html)

          commit-message: "自動化測試結果分析"
          branch: "auto-test-results-${{ github.run_number }}"
