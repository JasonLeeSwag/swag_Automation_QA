name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'
  
  pull_request:
    types: [opened, synchronize, reopened]
    labels:
      - e2e
  
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
        - qat
        - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
        - bvt
        - login
        - register
        - video
        - myprofile

jobs:
  test:
    runs-on: macos-latest
    
    env:
      ENVIRONMENT: ${{ github.event_name == 'schedule' && 'uat' || inputs.environment }}
      TEST_TYPE: ${{ (github.event_name == 'schedule' || github.event_name == 'pull_request') && 'bvt' || inputs.test_type }}
      DISPLAY: :0
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 設定 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 設定虛擬顯示器
        run: |
          # 安裝必要的套件
          brew install screenresolution
          
          # 設定螢幕解析度
          screenresolution set 1920x1080x32@60
          
          # 安裝 XQuartz (X11)
          brew install --cask xquartz
          
          # 啟動 XQuartz
          open -a XQuartz
          
          # 等待 XQuartz 啟動
          sleep 5
          
          # 設定 DISPLAY 環境變數
          echo "DISPLAY=:0" >> $GITHUB_ENV
          
      - name: 安裝 Chrome 和 ChromeDriver
        run: |
          # 安裝 Chrome
          brew install --cask google-chrome
          
          # 安裝 ChromeDriver
          brew install --cask chromedriver
          
          # 設定權限
          sudo xattr -r -d com.apple.quarantine /Applications/Google\ Chrome.app
          sudo xattr -r -d com.apple.quarantine $(which chromedriver)
          
          # 設定 ChromeDriver 路徑
          echo "CHROMEDRIVER_PATH=$(which chromedriver)" >> $GITHUB_ENV
          
      - name: 安裝 Python 套件
        run: |
          python -m pip install --upgrade pip
          pip install \
            robotframework==7.0.1 \
            robotframework-seleniumlibrary==6.3.0 \
            robotframework-selenium2library==3.0.0 \
            selenium==4.23.1 \
            pyotp==2.9.0 \
            robotframework-requests==0.9.7 \
            robotframework-jsonlibrary==0.5 \
            requests==2.32.3 \
            PyYAML==6.0.2 \
            python-dotenv==1.0.1 \
            cryptography==43.0.0 \
            pyOpenSSL==24.2.1 \
            Faker==27.0.0 \
            webdriver-manager==4.0.2 \
            robotframework-jsonvalidator==2.0.0 \
            robotframework-debuglibrary==2.5.0

      - name: 設定 Chrome 配置
        run: |
          mkdir -p ~/Library/Application\ Support/Google/Chrome
          echo '{
            "browser": {
              "enabled_labs_experiments": [
                "enable-force-dark",
                "enable-quic"
              ]
            },
            "profile": {
              "default_content_setting_values": {
                "notifications": 1,
                "plugins": 1,
                "popups": 1
              },
              "password_manager_enabled": false,
              "default_content_settings": {
                "popups": 1,
                "notifications": 1
              }
            }
          }' > ~/Library/Application\ Support/Google/Chrome/First\ Run

      - name: 執行自動化測試
        id: initial_test
        continue-on-error: true
        env:
          DISPLAY: :0
        run: |
          cd swag_Automation_QA
          
          # 複製 ChromeDriver 到專案目錄
          mkdir -p robotframework/robot_lib/chromedriver
          cp $(which chromedriver) robotframework/robot_lib/chromedriver/
          chmod +x robotframework/robot_lib/chromedriver/chromedriver
          
          # 設定 Python 路徑
          export PYTHONPATH=$PWD/robotframework/robot_lib:$PYTHONPATH
          
          # 執行測試
          robot \
            -v BROWSER:chrome \
            -v SELENIUM_TIMEOUT:30 \
            -v SELENIUM_IMPLICIT_WAIT:10 \
            -v CHROMEDRIVER_PATH:$(which chromedriver) \
            -v BROWSER_OPTIONS:"add_argument('--no-sandbox');add_argument('--start-maximized');add_argument('--disable-dev-shm-usage');add_argument('--disable-gpu');add_argument('--window-size=1920,1080');add_argument('--disable-notifications');add_argument('--enable-automation');add_argument('--disable-popup-blocking');add_argument('--remote-debugging-port=9222')" \
            -V data.yaml \
            -V country.yaml \
            -V ${ENVIRONMENT}_domain.yaml \
            -i ${TEST_TYPE} \
            TestCase

      - name: 重新執行失敗的測試
        if: steps.initial_test.outcome == 'failure'
        continue-on-error: true
        env:
          DISPLAY: :0
        run: |
          cd swag_Automation_QA
          if [ -f "output.xml" ]; then
            robot \
              --rerunfailed output.xml \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:30 \
              -v SELENIUM_IMPLICIT_WAIT:10 \
              -v CHROMEDRIVER_PATH:$(which chromedriver) \
              -v BROWSER_OPTIONS:"add_argument('--no-sandbox');add_argument('--start-maximized');add_argument('--disable-dev-shm-usage');add_argument('--disable-gpu');add_argument('--window-size=1920,1080');add_argument('--disable-notifications');add_argument('--enable-automation');add_argument('--disable-popup-blocking');add_argument('--remote-debugging-port=9222')" \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              -i ${TEST_TYPE} \
              TestCase
          fi

      - name: 上傳測試結果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.TEST_TYPE }}
          path: |
            swag_Automation_QA/*.xml
            swag_Automation_QA/log.html
            swag_Automation_QA/report.html
            swag_Automation_QA/reports/
          if-no-files-found: warn

      - name: 清理環境
        if: always()
        run: |
          pkill -f "Google Chrome" || true
          pkill -f "chromedriver" || true
          pkill -f "XQuartz" || true