name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'

  issues:
    types: [opened, edited]
    
  pull_request:
    types: [opened, synchronize, reopened, labeled, edited]
    
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
          - qat
          - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
          - bvt
          - login
          - register
          - video
          - myprofile
      custom_domain:
        description: '自定義網域 (可輸入完整URL或版本號)'
        required: false
        type: string
        default: ''

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  parse_content:
    if: |
      (github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'e2e') || contains(github.event.pull_request.labels.*.name, 'fulltest'))) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'e2e'))
    runs-on: [self-hosted, macos]
    outputs:
      should_run: ${{ steps.check_content.outputs.should_run }}
      test_type: ${{ steps.check_content.outputs.test_type }}
      base_url: ${{ steps.check_content.outputs.base_url }}
    
    steps:
      - name: 解析內容
        id: check_content
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
            TITLE="${{ github.event.pull_request.title }}"
            BODY="${{ github.event.pull_request.body }}"
          else
            LABELS="${{ join(github.event.issue.labels.*.name, ' ') }}"
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
          fi
          
          # 檢查測試類型
          if [[ $LABELS == *"fulltest"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "test_type=fulltest" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"e2e"* ]]; then
            TITLE_LOWER=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]')
            
            TEST_TYPE="bvt"
            if [[ $TITLE_LOWER =~ login|sign.?in ]]; then
              TEST_TYPE="login"
            elif [[ $TITLE_LOWER =~ register|sign.?up ]]; then
              TEST_TYPE="register"
            elif [[ $TITLE_LOWER =~ video|stream|rtc ]]; then
              TEST_TYPE="video"
            elif [[ $TITLE_LOWER =~ profile|account ]]; then
              TEST_TYPE="myprofile"
            fi
            
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "test_type=$TEST_TYPE" >> $GITHUB_OUTPUT
          fi
          
          # 解析自定義網域
          if [[ $BODY =~ base_url:[[:space:]]*(http[s]?:\/\/[^\s]*) ]]; then
            echo "base_url=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

  automated_test:
    needs: parse_content
    if: |
      needs.parse_content.outputs.should_run == 'true' || 
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'schedule'
    runs-on: [self-hosted, macos]
    
    env:
      ENVIRONMENT: ${{ github.event_name == 'schedule' && 'uat' || inputs.environment || 'qat' }}
      TEST_TYPE: ${{ github.event_name == 'schedule' && 'bvt' || needs.parse_content.outputs.test_type || inputs.test_type }}
      
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 清理工作區
        run: |
          rm -rf swag_Automation_QA/*.xml
          rm -rf swag_Automation_QA/*.html

      - name: 更新網域設定
        if: ${{ inputs.custom_domain != '' || needs.parse_content.outputs.base_url != '' }}
        run: |
          cd swag_Automation_QA
          cp ${ENVIRONMENT}_domain.yaml ${ENVIRONMENT}_domain.yaml.bak
          
          python3 <<EOF
          import yaml
          
          def process_domain_input(input_str):
              if not input_str:
                  return 'https://swag.live/?lang=zh-TW'
                  
              if input_str.startswith('http'):
                  return input_str
                  
              if input_str.startswith('v3-'):
                  return f'https://{input_str}.app.swag.live/?lang=zh-TW'
                  
              if '.app.swag.live' in input_str:
                  return f'https://{input_str}/?lang=zh-TW'
                  
              return f'https://{input_str}.app.swag.live/?lang=zh-TW'
          
          with open('${ENVIRONMENT}_domain.yaml', 'r', encoding='utf-8') as file:
              config = yaml.safe_load(file)
          
          input_domain = '${{ inputs.custom_domain || needs.parse_content.outputs.base_url }}'
          processed_url = process_domain_input(input_domain)
          config['SWAG_BASE_URL'] = processed_url
          
          with open('${ENVIRONMENT}_domain.yaml', 'w', encoding='utf-8') as file:
              yaml.dump(config, file, allow_unicode=True, default_flow_style=False)
          EOF

      - name: 執行測試
        id: test
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          if [[ "${{ env.TEST_TYPE }}" == "fulltest" ]]; then
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              TestCase
          else
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              -i ${TEST_TYPE} \
              TestCase
          fi

      - name: 分析測試結果
        id: analyze_results
        run: |
          python3 <<EOF
          import os
          from xml.etree import ElementTree as ET
          from datetime import datetime
          
          def generate_test_report():
              result_file = 'swag_Automation_QA/output.xml'
              if not os.path.exists(result_file):
                  return "找不到測試結果檔案"
                  
              tree = ET.parse(result_file)
              root = tree.getroot()
              tests = root.findall('.//test')
              
              report = ["### 測試結果摘要"]
              passed = failed = 0
              failed_tests = []
              
              for test in tests:
                  name = test.get('name', 'Unknown Test')
                  status = test.find('status').get('status', '').upper()
                  
                  if status == 'PASS':
                      passed += 1
                  elif status == 'FAIL':
                      failed += 1
                      failed_tests.append(name)
              
              total = len(tests)
              success_rate = (passed / total * 100) if total > 0 else 0
              
              report.append(f"\n**執行環境:** {os.environ.get('ENVIRONMENT', 'Unknown')}")
              report.append(f"**測試類型:** {os.environ.get('TEST_TYPE', 'Unknown')}")
              report.append(f"**總測試數:** {total}")
              report.append(f"**通過:** {passed}")
              report.append(f"**失敗:** {failed}")
              report.append(f"**成功率:** {success_rate:.1f}%")
              
              if failed_tests:
                  report.append("\n### 失敗的測試案例")
                  for test in failed_tests:
                      report.append(f"- {test}")
              
              return "\n".join(report)
          
          # 生成報告
          report = generate_test_report()
          
          # 保存到文件
          with open('test-report.md', 'w', encoding='utf-8') as f:
              f.write(report)
          
          # 設置環境變數
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
              env_file.write(f'CURRENT_TIME={current_time}\n')
          EOF

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.TEST_TYPE }}_${{ env.CURRENT_TIME }}
          path: |
            swag_Automation_QA/*.xml
            swag_Automation_QA/*.html
            test-report.md
          if-no-files-found: warn

      - name: 發布測試報告評論
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } else if (context.eventName === 'issues') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }