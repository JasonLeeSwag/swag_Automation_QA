name: SWAG 自動化測試

on:
  schedule:
    - cron: '0 9 * * 1'

  pull_request:
    types: [opened, synchronize, reopened, labeled]
    
  workflow_dispatch:
    inputs:
      environment:
        description: '選擇測試環境'
        required: true
        default: 'qat'
        type: choice
        options:
          - qat
          - uat
      test_type:
        description: '選擇測試類型'
        required: true
        default: 'bvt'
        type: choice
        options:
          - bvt
          - login
          - register
          - video
          - myprofile
      custom_domain:
        description: '自定義網域 (可輸入完整URL或版本號，例如: https://v3-210.app.swag.live/?lang=zh-TW 或 v3-210.app.swag.live 或 v3-210 或 v3-210.1)'
        required: false
        type: string
        default: ''

jobs:
  determine_test_type:
    runs-on: [self-hosted, macos]
    outputs:
      test_type: ${{ steps.set_test.outputs.test_type }}
      should_run: ${{ steps.check_run.outputs.should_run }}
    
    steps:
      - name: 檢查標籤和決定測試類型
        id: check_run
        run: |
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          echo "Labels: $LABELS"
          
          if [[ $LABELS == *"fulltest"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "找到 fulltest 標籤，將執行完整測試"
          elif [[ $LABELS == *"e2e"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "找到 e2e 標籤，將根據 PR 標題決定測試範圍"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "未找到相關標籤，不執行測試"
          fi

      - name: 分析 PR 標題和設置測試類型
        id: set_test
        if: contains(github.event.pull_request.labels.*.name, 'e2e')
        run: |
          # 轉換 PR 標題為小寫並存儲
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_TITLE_LOWER=$(echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]')
          echo "PR 標題: $PR_TITLE"
          
          # 定義可用的測試類型和對應的關鍵字
          declare -A TEST_KEYWORDS
          TEST_KEYWORDS["login"]="login|sign.?in"
          TEST_KEYWORDS["register"]="register|sign.?up"
          TEST_KEYWORDS["video"]="video|stream|rtc"
          TEST_KEYWORDS["myprofile"]="profile|account"
          
          # 默認測試類型
          TEST_TYPE="bvt"
          
          # 檢查標題中的關鍵字
          for test in "${!TEST_KEYWORDS[@]}"; do
            if echo "$PR_TITLE_LOWER" | grep -E "${TEST_KEYWORDS[$test]}" > /dev/null; then
              TEST_TYPE="$test"
              echo "匹配到測試類型: $test"
              break
            fi
          done
          
          echo "test_type=$TEST_TYPE" >> $GITHUB_OUTPUT
          echo "將執行的測試類型: $TEST_TYPE"

  test:
    needs: determine_test_type
    if: needs.determine_test_type.outputs.should_run == 'true'
    runs-on: [self-hosted, macos]

    env:
      ENVIRONMENT: ${{ github.event_name == 'schedule' && 'uat' || 'qat' }}
      TEST_TYPE: ${{ github.event.pull_request && needs.determine_test_type.outputs.test_type || inputs.test_type || 'bvt' }}
      PYTHONPATH: ${{ github.workspace }}/swag_Automation_QA/robotframework/robot_lib

    steps:
      - name: 清理工作區
        run: |
          rm -rf swag_Automation_QA/*.xml
          rm -rf swag_Automation_QA/*.html

      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 更新網域設定
        run: |
          cd swag_Automation_QA
          # 備份原始檔案
          cp ${ENVIRONMENT}_domain.yaml ${ENVIRONMENT}_domain.yaml.bak
          
          # 使用 Python 更新 YAML 檔案
          python3 <<EOF
          import yaml
          import re
          
          def process_domain_input(input_str):
              # 如果沒有輸入，使用預設值
              if not input_str:
                  return 'https://swag.live/?lang=zh-TW'
                  
              # 如果是完整的 URL，直接返回
              if input_str.startswith('http'):
                  return input_str
                  
              # 如果只有版本號（如 v3-210 或 v3-210.1）
              if input_str.startswith('v3-'):
                  return f'https://{input_str}.app.swag.live/?lang=zh-TW'
                  
              # 如果是完整域名但沒有協議和參數
              if '.app.swag.live' in input_str:
                  return f'https://{input_str}/?lang=zh-TW'
                  
              # 如果不符合上述任何情況，假設是版本號
              return f'https://{input_str}.app.swag.live/?lang=zh-TW'
          
          # 讀取原始設定
          with open('${ENVIRONMENT}_domain.yaml', 'r', encoding='utf-8') as file:
              config = yaml.safe_load(file)
          
          # 處理輸入並更新 URL
          input_domain = '${{ inputs.custom_domain }}'
          processed_url = process_domain_input(input_domain)
          config['SWAG_BASE_URL'] = processed_url
          
          # 寫回檔案
          with open('${ENVIRONMENT}_domain.yaml', 'w', encoding='utf-8') as file:
              yaml.dump(config, file, allow_unicode=True, default_flow_style=False)
              
          # 印出更新後的內容以供確認
          print("更新後的網域設定：")
          print(f"SWAG_BASE_URL: {config['SWAG_BASE_URL']}")
          EOF

      - name: 執行測試
        id: test
        continue-on-error: true
        run: |
          cd swag_Automation_QA
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'fulltest') }}" == "true" ]]; then
            # 執行所有測試
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              TestCase
          else
            # 執行特定測試
            arch -arm64 robot \
              -v BROWSER:chrome \
              -v SELENIUM_TIMEOUT:60 \
              -v SELENIUM_IMPLICIT_WAIT:30 \
              -V data.yaml \
              -V country.yaml \
              -V ${ENVIRONMENT}_domain.yaml \
              -i ${TEST_TYPE} \
              TestCase
          fi

      - name: 分析測試結果
        id: analyze_results
        run: |
          python3 <<EOF
          import os
          from xml.etree import ElementTree as ET
          from datetime import datetime

          result_file = 'swag_Automation_QA/output.xml'
          pass_count = fail_count = 0

          try:
              if os.path.exists(result_file):
                  tree = ET.parse(result_file)
                  root = tree.getroot()
                  for suite in root.findall('.//suite'):
                      for test in suite.findall('.//test'):
                          status_elem = test.find('status')
                          if status_elem is not None:
                              status = status_elem.get('status', '').upper()
                              if status == 'PASS':
                                  pass_count += 1
                              elif status == 'FAIL':
                                  fail_count += 1

                  print(f"測試完成！\n通過測試數: {pass_count}\n失敗測試數: {fail_count}")
                  
                  # 輸出測試結果狀態供後續步驟使用
                  with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                      status_icon = '✅PASS' if fail_count == 0 else '❌FAIL'
                      current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
                      env_file.write(f'TEST_STATUS={status_icon}\n')
                      env_file.write(f'CURRENT_TIME={current_time}\n')
                  
                  if fail_count > 0:
                      exit(1)
              else:
                  print(f"找不到測試結果檔案：{result_file}")
                  exit(1)
          except Exception as e:
              print(f"分析測試結果時發生錯誤：{str(e)}")
              exit(1)
          EOF

      - name: 打印測試結果
        if: success()
        run: echo "所有測試均通過！"

      - name: 打印失敗結果
        if: failure()
        run: echo "部分測試失敗，請檢查測試結果！"

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TEST_STATUS }}-test-results-${{ env.TEST_TYPE }}_${{ env.CURRENT_TIME }}
          path: |
            swag_Automation_QA/*.xml
            swag_Automation_QA/*.html
          if-no-files-found: warn